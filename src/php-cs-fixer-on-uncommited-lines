#!/usr/bin/env php
<?php
$vendorPath = realpath(__DIR__.DIRECTORY_SEPARATOR.'..'.DIRECTORY_SEPARATOR.'vendor');
require $vendorPath.DIRECTORY_SEPARATOR.'autoload.php';
$parser = new \Console_CommandLine();
$parser->addOption('configFile', [
    'short_name' => '-c',
    'long_name' => '--config-file',
    'default' => '',
    'description' => 'config file for php-cs-fixer with .php_cs extension',
    'action' => 'StoreString',
]);
$parser->addArgument('sourceFile', [
    'help_name' => 'file',
    'descriptiont' => 'file',
]);
try {
    $command = $parser->parse();
} catch (Exception $exc) {
    $parser->displayError($exc->getMessage());
}
// Source file to parse
$sourceFile = $command->args['sourceFile'];
if (!file_exists($sourceFile)) {
    trigger_error('File "'.$sourceFile.'" does not exist', E_USER_ERROR);
}

// Get uncommited lines number
$exec = exec('git blame '.escapeshellarg($sourceFile).' | egrep -oh \'^00000000.*?([0-9]+)\)\' | egrep -oh \'([0-9]+)\)$\' | sed -e \'s/)//g\'', $uncommitedLines, $return);
if ($return !== 0) {
    trigger_error('Finding uncommited lines failed', E_USER_ERROR);
}
// Generate a fixed copy of source file
$fixedFile = tempnam(sys_get_temp_dir(), '');
copy($sourceFile, $fixedFile);
// Can't check php-cs-fixer return code because it return 1 if changes are made
$options = [];
if (!empty($command->options['configFile'])) {
    $options[] = '--config-file='.escapeshellarg($command->options['configFile']);
}
$options = !empty($options) ? implode(' ', $options) : '';
exec('php-cs-fixer fix '.$options.' '.escapeshellarg($fixedFile), $output, $return);

// Compute diff between files
$diffCmd = 'diff -u '.escapeshellarg($sourceFile).' '.escapeshellarg($fixedFile);
$patch = shell_exec($diffCmd);
// Blame start line at 1, unlike diff
foreach ($uncommitedLines as $k => $v) {
    --$uncommitedLines[$k];
}
$countUncommitedLines = count($uncommitedLines);
// We got a diff
$exitCode = 0;
if (!empty($patch)) {
    $patches = preg_split('~^@@~m', $patch);
    $finalPatch = $patches[0];
    array_shift($patches);
    $countPatches = count($patches);
    $applyFinalPatch = false;
    // each chunk
    for ($j = 0; $j < $countPatches; ++$j) {
        $patch = $patches[$j];
        // If the chunk contains an uncommited line
        // add it to the final patch
        if (preg_match('~^\s*-([0-9]+),([0-9]+)~', $patch, $matches)) {
            $startPatch = $matches[1];
            $endPatch = $startPatch + $matches[2];
            for ($i = 0; $i < $countUncommitedLines; ++$i) {
                $line = $uncommitedLines[$i];
                if ($startPatch <= $line && $line <= $endPatch) {
                    $finalPatch .= '@@'.$patch;
                    $i = $countUncommitedLines;
                    $applyFinalPatch = true;
                }
            }
        }
    }
    // Apply final patch on the sourceFile if needed
    if ($applyFinalPatch) {
        echo "Formatting errors detected applying patch:\n$finalPatch\n";
        $patchFile = tempnam(sys_get_temp_dir(), '');
        file_put_contents($patchFile, $finalPatch);
        shell_exec('patch '.escapeshellarg($sourceFile).' < '.escapeshellarg($patchFile));
        unlink($patchFile);
        $exitCode = 1;
    }
}
if ($exitCode !== 1) {
    echo 'No formatting errors detected in '.$sourceFile."\n";
}
unlink($fixedFile);
exit($exitCode);
